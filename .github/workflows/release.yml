name: Create Release from Tag

# This workflow can be triggered on any tag through the GitHub API
# It will detect which tag triggered it and create a release for that tag

on:
  workflow_dispatch: {}
  # Allow manual triggering without any inputs
  
  create:
    # Automatically trigger when a new tag is created
    tags:
      - '*'

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get tag name
      id: tag
      run: |
        if [ "${{ github.event_name }}" = "create" ] && [ "${{ github.event.ref_type }}" = "tag" ]; then
          # Triggered by tag creation
          TAG_NAME="${{ github.event.ref }}"
        elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # Manually triggered - detect from ref
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG_NAME="${{ github.ref_name }}"
          else
            echo "❌ Error: Manual workflow must be run from a tag"
            echo "Current ref: ${{ github.ref }}"
            echo "Please use 'Use workflow from: Tags' and select a tag"
            exit 1
          fi
        else
          echo "❌ Error: Unsupported trigger"
          exit 1
        fi
        
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "✅ Detected tag: $TAG_NAME"
        
    - name: Check if release exists
      id: check_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_NAME="${{ steps.tag.outputs.tag_name }}"
        
        if gh release view "$TAG_NAME" >/dev/null 2>&1; then
          echo "❌ Release already exists for tag $TAG_NAME"
          echo "release_exists=true" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "✅ No existing release found for tag $TAG_NAME"
          echo "release_exists=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Generate release notes
      id: release_notes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_NAME="${{ steps.tag.outputs.tag_name }}"
        
        echo "Generating release notes for $TAG_NAME..."
        
        # Get the previous tag for comparison
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -A1 "^$TAG_NAME$" | tail -1)
        
        if [ -n "$PREVIOUS_TAG" ] && [ "$PREVIOUS_TAG" != "$TAG_NAME" ]; then
          echo "Comparing $PREVIOUS_TAG...$TAG_NAME"
          
          # Generate changelog between tags
          CHANGELOG=$(git log --pretty=format:"- %s" "$PREVIOUS_TAG..$TAG_NAME" 2>/dev/null || echo "- Initial release")
          
          # Create release body
          RELEASE_BODY="## What's Changed
        
$CHANGELOG

**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$TAG_NAME"
        else
          RELEASE_BODY="## What's Changed

- Initial release

**Full Changelog**: https://github.com/${{ github.repository }}/commits/$TAG_NAME"
        fi
        
        echo "Generated release notes:"
        echo "$RELEASE_BODY"
        
        # Save to output (escape newlines)
        {
          echo 'release_body<<EOF'
          echo "$RELEASE_BODY"
          echo EOF
        } >> $GITHUB_OUTPUT
        
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_NAME="${{ steps.tag.outputs.tag_name }}"
        RELEASE_BODY="${{ steps.release_notes.outputs.release_body }}"
        
        echo "Creating GitHub release for $TAG_NAME..."
        
        gh release create "$TAG_NAME" \
          --title "$TAG_NAME" \
          --notes "$RELEASE_BODY" \
          --generate-notes
          
        echo "✅ Successfully created release for $TAG_NAME"
